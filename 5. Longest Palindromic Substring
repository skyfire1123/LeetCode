/**
  * https://leetcode.com/problems/longest-palindromic-substring/
  */

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        string res;
        if(n < 2) return s;
        int left, right;
        int max = INT_MIN;
        for(int i = 0; i < n; ++i){
            if(i > 0 && s[i] == s[i-1]){
                left = i-1;
                right = i;
                bool isEqual = true;
                while(left > 0 && right < n-1){
                    if(s[--left] != s[++right]){
                        isEqual = false;
                        break;
                    }
                }
                if(isEqual && right-left+1 > max){
                    max = right-left+1;
                    res = s.substr(left, right-left+1);
                }
                if(!isEqual && right-left-1 > max){
                    max = right-left-1;
                    res = s.substr(left+1, right-left-1);
                }
            }
            if(i > 0 && i < n-1 && s[i+1] == s[i-1]){
                left = i-1;
                right = i+1;
                bool isEqual = true;
                while(left > 0 && right < n-1){
                    if(s[--left] != s[++right]){
                        isEqual = false;
                        break;
                    }
                }
                if(isEqual && right-left+1 > max){
                    max = right-left+1;
                    res = s.substr(left, right-left+1);
                }
                if(!isEqual && right-left-1 > max){
                    max = right-left-1;
                    res = s.substr(left+1, right-left-1);
                }
            }
        }
        return res;
    }
};
