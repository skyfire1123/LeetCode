/**
  * https://leetcode.com/problems/binary-tree-right-side-view/
  */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ret;
        if(root == NULL) return ret;
        ret.push_back(root->val);
        if(root->left == NULL && root->right == NULL) return ret;
        vector<int> l = rightSideView(root->left);
        vector<int> r = rightSideView(root->right);
        if(r.size() >= l.size()){
            for(int i = 0; i < r.size(); ++i){
                ret.push_back(r[i]);
            }
        }else{
           for(int i = 0; i < l.size();++i){
            if(i < r.size()){
                ret.push_back(r[i]);
            }else{
                ret.push_back(l[i]);
            }
        }
        return ret;
    }
};
