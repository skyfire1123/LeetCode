/**
  * https://leetcode.com/problems/palindrome-linked-list/
  */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == nullptr || head->next == nullptr) return true;
        stack<int> ist;
        int len = 0;
        for(ListNode* node = head; node != nullptr; node = node->next) len++;
        if(len == 2 ) return head->val == head->next->val? true:false;
        int i = 0;
        bool isOdd = len % 2 == 0? false : true;
        for(ListNode* node = head; i < len; ++i, node = node->next){
            if(i  < len/2){
                ist.push(node->val);
            }
            if(i  >= (len/2 + isOdd)){
                if(node->val != ist.top()){
                    return false;
                }
                ist.pop();
            }
        }
        return true;
    }
};
