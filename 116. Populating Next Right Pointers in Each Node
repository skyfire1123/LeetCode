/**
  * https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
  */

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root == NULL) return ;
        queue<TreeLinkNode*> que;
        que.push(root);
        int count = 1,floor = 1;
        vector<TreeLinkNode*> level; 
        while(!que.empty()){
            TreeLinkNode* node = que.front();
            level.push_back(node);
            vector<TreeLinkNode*> temp; 
            if(count == pow(2,floor)-1){
                int i = 0;
                for(; i < level.size()-1;++i){
                    level[i]->next = level[i+1];
                }
                level[i]->next = NULL;
                level.swap(temp);
                ++floor;
            }
            que.pop();
            if(node->left) que.push(node->left);
            if(node->right) que.push(node->right);
            count++;
        }
    }
};
