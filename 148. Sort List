/**
  * https://leetcode.com/problems/sort-list/
  */
  
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode Lhead = head;
        ListNode mid = findMid(head);
        ListNode Rhead = mid.next;
        mid.next = null;
        Lhead = sortList(Lhead);
        Rhead = sortList(Rhead);
        return merge_sort(Lhead,Rhead);
    }
    private ListNode findMid(ListNode head){
        if(head == null) return head;
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    private ListNode merge_sort(ListNode left,ListNode right){
        if(left == null && right == null || right == null) return left;
        if(left == null) return right;
        ListNode ret = new ListNode(0);
        ListNode head = ret;
        while(left!=null && right!=null){
            if(left.val <= right.val){
                head.next = left;
                left = left.next;
            }else{
                head.next = right;
                right = right.next;
            }
            head = head.next;
        }
        if(left == null) head.next = right;
        if(right == null) head.next = left;
        return ret.next;
    }
}
