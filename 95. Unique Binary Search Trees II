/**
  * https://leetcode.com/problems/unique-binary-search-trees-ii/
  */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        return generateTrees(1,n);
    }
    vector<TreeNode*> generateTrees(int beg, int end){
        vector<TreeNode*> res;
        if(beg > end) return res;
        if(beg == end){
            res.push_back(new TreeNode(beg));
            return res;
        }
        for(int i = beg; i <= end; ++i){
            vector<TreeNode*> left = generateTrees(beg,i-1);
            vector<TreeNode*> right = generateTrees(i+1,end);
            if(left.size() == 0){
                for(TreeNode * rRoot: right){
                    TreeNode* root = new TreeNode(i);
                    root->left = NULL;
                    root->right = rRoot;
                    res.push_back(root);
                }
            }else if(right.size() == 0){
                for(TreeNode* lRoot: left){
                    TreeNode* root = new TreeNode(i);
                    root->left = lRoot;
                    root->right = NULL;
                    res.push_back(root);
                }
            }else{
                for(TreeNode* lRoot: left){
                    for(TreeNode * rRoot: right){
                        TreeNode* root = new TreeNode(i);
                        root->left = lRoot;
                        root->right = rRoot;
                        res.push_back(root);
                    }
                }
            }
        }
        return res;
    }
};
