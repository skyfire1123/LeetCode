/**
  * https://leetcode.com/problems/palindrome-partitioning/
  */

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> ans;
        int start = 0;
        dfs(s,ans,res);
        return res;
    }
    void dfs(string s, vector<string>& ans, vector<vector<string>>& res){
        if(s.empty()){
            res.push_back(ans);
        }
        for(int i = 1; i <= s.size(); ++i){
            string str = s.substr(0,i); //string.substr(size_type _Off,size_type _Count);
            if(isPalindrome(str)){
                ans.push_back(str);
                dfs(s.substr(i),ans,res);
                ans.pop_back();
            }
        }
    }
    bool isPalindrome(string s){
        int n = s.size();
        for(int i = 0; i < n/2; ++i){
            if(s[i]!=s[n-i-1])
                return false;
        }
        return true;
    }
};
