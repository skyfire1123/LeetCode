/**
  * https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
  */
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int lens = prices.size();
        if(lens < 2) return 0;
        int buy[lens] = {0};
        int sell[lens] = {0};
        buy[0] = -prices[0];
        sell[0] = 0;
        for(int i = 1; i <lens; ++i){
            sell[i] = max(sell[i-1], buy[i-1] + prices[i]);
            if(i >= 2){
                buy[i] = max(buy[i-1], sell[i-2] - prices[i]);
            }else{
                buy[i] = max(buy[i-1],-prices[i]);
            }
        }
        return sell[lens-1];
    }
};
